{"builtin":false,"collection":"Fif","group":"Internet.Firewall","name":"InetAddress.getByName","author":"Fif_","version":4,"description":"This hook prevents apps from getting a successful DNS resolution for a user-defined list of domains.\nThe host\/domain blacklist can be edited with XPrivacyLua Pro, under \"Custom Values\", \"Firewall host\/domain blacklist\".  List items are whitespace separated, and will match the whole string and\/or any subdomains.  For example, if the blacklist is \"google.com facebook.com\", all of google.com, www.google.com, we.love.google.com and www.facebook.com will be blocked.","className":"java.net.InetAddress","methodName":"getByName","parameterTypes":["java.lang.String"],"returnType":"java.net.InetAddress","minSdk":1,"maxSdk":999,"minApk":0,"maxApk":2147483647,"enabled":true,"optional":false,"usage":true,"notify":false,"luaScript":"-- Fif.InetAdress.getXByName is a Lua hook designed to work with XPrivacyLua.\n-- Copyright (C) 2018 Philippe Troin (Fif_ on XDA)\n\n-- Fif.InetAdress.getXByName is free software: you can redistribute it and\/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation, either version 3 of the License, or\n-- (at your option) any later version.\n\n-- Fif.InetAdress.getXByName is distributed in the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\n-- You should have received a copy of the GNU General Public License\n-- along with XPrivacyLua.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\nfunction before(hook, param)\n    local scope = param:getApplicationContext()\n    local BlacklistHosts = param:getValue('Fif.InetAddress.getXByName.BlacklistHosts', scope)\n    if BlacklistHosts == nil then\n        local blacklist = param:getSetting(\"Firewall host\/domain blacklist\")\n        BlacklistHosts = {}\n        local blacklistLog = {}\n        if blacklist ~= nil then\n            blacklist:gsub('[%S]+', function(x) local h = x:gsub('[.]*$', ''):lower() BlacklistHosts[h] = true table.insert(blacklistLog, h) end)\n        end\n        param:putValue('Fif.InetAddress.getXByName.BlacklistHosts', BlacklistHosts, scope)\n        log('DNS blacklist: ' .. table.concat(blacklistLog, ', '))\n    end\n\n    local host = param:getArgument(0)\n    local pass = true\n    if host == nil then\n        host = '(null)'\n    else\n        local shost = host:gsub('[.]*$', ''):lower()\n        while true do\n            if BlacklistHosts[shost] == true then\n                pass = false\n                break\n            else\n                local nsubs\n                shost, nsubs = shost:gsub('^[^.]*[.]', '')\n                if nsubs ~= 1 then\n                    break\n                end\n            end\n        end\n    end\n    if pass then\n        log('Allow ' .. host)\n        return false\n    else\n        log('Deny ' .. host)\n        local clsHostNotFound = luajava.bindClass('java.net.UnknownHostException')\n        local fake = luajava.new(clsHostNotFound, 'Privacy')\n        param:setResult(fake)\n        return true, host\n    end\nend\n","settings":["Firewall host\/domain blacklist"]}
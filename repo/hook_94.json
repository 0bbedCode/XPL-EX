{"builtin":false,"collection":"Fif","group":"Get.Applications","name":"PackageManager.getPackageInfo\/packageName","author":"Fif_","version":3,"description":"This hook complements the built-in PackageManager XPrivacyLua hooks.\n\u2605\u2605\u2605 Please make sure all hooks in the set are the same version! \u2605\u2605\u2605\n\u2605\u2605\u2605 Please read the changelog below when upgrading from version 1! \u2605\u2605\u2605\n\nInstructions:\n1. Download these hooks:\n    - PackageManager.getApplicationEnabledSetting (all Android versions)\n    - PackageManager.getApplicationInfo (Marshmallow 6.0 and earlier)\n    - PackageManager.getApplicationInfoAsUser (Nougat 7.0 and later)\n    - PackageManager.getPackageInfo\/packageName (Marshmallow 6.0 and earlier)\n    - PackageManager.getPackageInfoAsUser (Nougat 7.0 and later)\n    - PackageManager.getPackageInfo\/versionedPackage (Oreo 8.0 and later)\n    - PackageManager.getPackageGids (Marshmallow 6.0 and earlier)\n    - PackageManager.getPackageGids\/flags (Nougat 7.0 and later)\n    - PackageManager.getPackageUid (Marshmallow 6.0 and earlier\n    - PackageManager.getPackageUidAsUser (Nougat 7.0 and later)\n   Note that it won't hurt and won't cause unnecessary overhead to download hooks for the wrong Android version, they'll be greyed out in \"Manage hook defininitions\".\n2. Make sure that the Fif collection is enabled in XPL Pro.\n3. For any app for which you want the hooks to apply:\n3.a. Toggle the \"Get Applications\" category until it's fully enabled (red) in XPL.\n3.b. Or, alternately, enable in XPL Pro all the hooks listed above that apply to your Android version.\n\nChangelog:\n\nv3 - 2020-05-25\nFix exception in PackageManager.getApplicationEnabledSetting.\n\nv2 - 2018-10-10\nFix exception in getPackageUid\/Gids hooks.\nAdded getApplicationEnabledSetting, getApplicationInfo, getApplicationInfoAsUser, getPackageInfoAsUser and getPackageUidAsUser hooks.\nMade getPackageInfo\/packageName, getPackageGids and getPackageUid available on MM and earlier only.\nNote hook users: if you are running Nougat 7.0 and later and had assigments for getPackageInfo\/packageName, getPackageGids or getPackageUid you will have to reassign them respectively to getPackageInfoAsUser, getPackageGids\/flags and getPackageUidAsUser when upgrading to version 2.\n\nv1 - 2018-10-04\nFirst public release.\n","className":"android.content.pm.PackageManager","methodName":"getPackageInfo","parameterTypes":["java.lang.String","int"],"returnType":"android.content.pm.PackageInfo","minSdk":1,"maxSdk":23,"minApk":0,"maxApk":2147483647,"enabled":true,"optional":false,"usage":true,"notify":false,"luaScript":"-- Fif.PackageManager.get* is a Lua hook set designed to work with XPrivacyLua.\n-- Copyright (C) 2018 Philippe Troin (Fif_ on XDA)\n\n-- Fif.PackageManager.get* is free software: you can redistribute it and\/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation, either version 3 of the License, or\n-- (at your option) any later version.\n\n-- Fif.PackageManager.get* is distributed in the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\n-- You should have received a copy of the GNU General Public License\n-- along with XPrivacyLua.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\nfunction after(hook, param)\n    local result = param:getResult()\n    if result == nil then\n        return false\n    end\n\n    local scope = param:getApplicationContext()\n    local applicationInfo, packageName\n    local hookName = hook:getName()\n    local hookNameGetPackageInfo = 'PackageManager.getPackageInfo'\n    local hookNameGetPackage = 'PackageManager.getPackage'\n    local hookNameGetApplication = 'PackageManager.getApplication'\n\n    if hookName:sub(1, hookNameGetPackage:len()) == hookNameGetPackage then\n        local packageInfo\n        if hookName:sub(1, hookNameGetPackageInfo:len()) == hookNameGetPackageInfo then\n            if (hookName == 'PackageManager.getPackageInfo\/packageName' \n                    or hookName == 'PackageManager.getPackageInfoAsUser' )\n                    and param:getValue('Fif.PackageManager.getPackage.selfCall.package.' .. param:getArgument(0), scope) == '1' then\n                return false\n            end\n            packageInfo = result\n        else\n            local pm = param:getThis()\n            -- Ugh, our hooked version of getPackageInfo can throw and exception\n            -- which will show up as an error (even though the hooks together \n            -- performed as expected).  Signal to the other hook this is us calling ourselves.\n            param:putValue('Fif.PackageManager.getPackage.selfCall.package.' .. param:getArgument(0), '1', scope)\n            packageInfo = pm:getPackageInfo(param:getArgument(0), 0)\n            param:putValue('Fif.PackageManager.getPackage.selfCall.package.' .. param:getArgument(0), nil, scope)\n        end\n        applicationInfo = packageInfo.applicationInfo\n        packageName = packageInfo.packageName\n    elseif hookName:sub(1, hookNameGetApplication:len()) == hookNameGetApplication then\n        if hookName == 'PackageManager.getApplicationInfo' or hookName == 'PackageManager.getApplicationInfoAsUser' then\n            if param:getValue('Fif.PackageManager.getPackage.selfCall.application.' .. param:getArgument(0), scope) == '1' then\n                return false\n            end\n            applicationInfo = result\n        else\n            local pm = param:getThis()\n            -- Ugh, our hooked version of getApplicationInfo can throw and exception\n            -- which will show up as an error (even though the hooks together \n            -- performed as expected).  Signal to the other hook this is us calling ourselves.\n            param:putValue('Fif.PackageManager.getPackage.selfCall.application.' .. param:getArgument(0), '1', scope)\n            applicationInfo = pm:getApplicationInfo(param:getArgument(0), 0)\n            param:putValue('Fif.PackageManager.getPackage.selfCall.application.' .. param:getArgument(0), nil, scope)\n        end\n        packageName = param:getArgument(0)\n    else\n        local crash = \"Unexpected hookName=\" .. hookName\n        crash.crash()\n    end\n\n    if bit32.band(applicationInfo.flags, applicationInfo.FLAG_SYSTEM) ~= 0 then\n        log('Allow ' .. packageName .. ' (system)')\n        return false\n    end\n\n    local cuid = param:getUid()\n    -- if hookName:sub(-6) == 'AsUser' then\n    --     cuid = param:getArgument(2)\n    -- end\n\n    if cuid == applicationInfo.uid then\n        log('Allow ' .. packageName .. ' (same uid)')\n        return false\n    end\n\n    local clsException\n    if hookName == 'PackageManager.getApplicationEnabledSetting' then\n        clsException = luajava.bindClass('java.lang.IllegalArgumentException')\n    else\n        clsException = luajava.bindClass('android.content.pm.PackageManager$NameNotFoundException')\n    end\n    local fake = luajava.new(clsException, packageName)\n    param:setResult(fake)\n    log('Deny ' .. packageName)\n    return true, packageName, tostring(fake)\nend\n"}
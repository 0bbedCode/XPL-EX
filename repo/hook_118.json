{"builtin":false,"collection":"Fif","group":"Group notifications","name":"Notification.GroupHelper.onNotificationRemoved","author":"Fif_","version":4,"description":"Refer to the Notification.GroupHelper.onNotificationPosted hook for documentation.\n","className":"com.android.server.notification.GroupHelper","methodName":"onNotificationRemoved","parameterTypes":["android.service.notification.StatusBarNotification"],"minSdk":26,"maxSdk":999,"minApk":0,"maxApk":2147483647,"excludePackages":"^(?!android$).*","enabled":true,"optional":false,"usage":true,"notify":false,"luaScript":"-- Fif.Notification is a Lua hook set designed to work with XPrivacyLua.\n-- Copyright (C) 2018, 2019 Philippe Troin (Fif_ on XDA)\n\n-- Fif.Notification is free software: you can redistribute it and\/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation, either version 3 of the License, or\n-- (at your option) any later version.\n\n-- Fif.Notification is distributed in the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\n-- You should have received a copy of the GNU General Public License\n-- along with XPrivacyLua.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\nfunction before(hook, param)\n    local notif = param:getArgument(0)\n    if notif == nil then\n        return false\n    end\n\n    local context = param:getApplicationContext()\n    local UngroupedApps = param:getValue('Fif.Notification.UngroupedApps', context)\n\n    if UngroupedApps == nil then\n        local packages = param:getSetting(\"Ungrouped notification package names\")\n        UngroupedApps = {}\n        local ungroupedAppsLog = {}\n        if packages ~= nil then\n            packages:gsub('[%S]+', function(x) UngroupedApps[x] = true table.insert(ungroupedAppsLog, x) end)\n        end\n        param:putValue('Fif.Notification.UngroupedApps', UngroupedApps, context)\n        log('Apps with ungrouped notifications: ' .. table.concat(ungroupedAppsLog, ', '))\n    end\n\n    local package = notif:getPackageName()\n    \n    if UngroupedApps[package] then\n        log('Deny ' .. package)\n        param:setResult(nil)\n        return true, package\n    else\n        log('Allow ' .. package)\n        return false\n    end\nend\n","settings":["Ungrouped notification package names"]}
{"builtin":false,"collection":"Fif","group":"Public.Storage","name":"BlockGuardOs.open","author":"M66B, Fif_","version":13,"description":"This is an expanded version of the hook by the same name published by M66B.\nIt should be used instead of the M66B hook as it is less prone to crash apps.\nBlocks file access to any but a whitelist of acceptable directories.  This should prevent apps from accessing any files outside of app-specific directories.\n\nThe whitelist consists of (some paths are computed dynamically and will change from a device or Android version to an other):\n\/data\/data\/<app-id>\n\/data\/media\/<user-id>\/Android\/data\/<app-id>\n\/data\/media\/<user-id>\/Android\/media\/<app-id>\n\/data\/media\/<user-id>\/Android\/obb\/<app-id>\n\/data\/misc\/\n\/data\/user\/<user-id>\/<app-id>\n\/data\/user_de\/<user-id>\/<app-id>\n\/data\/user_de\/<user-id>\/com.google.android.gms\n\/dev\/\n\/etc\/textclassifier\/\n\/etc\/timezone\n\/proc\/meminfo\n\/proc\/<pid>\/\n\/proc\/self\/\n\/proc\/vmstat\n\/proc\/zoneinfo\n\/product\/\n\/system\n\/vendor\/\n\nOn Android 10 and below, the following framework paths are also whitelisted:\n\n\/data\/app\/<app-id>-*\n\/data\/app\/com.android.chrome-*\n\/data\/app\/com.android.webview-*\n\/data\/app\/com.google.android.gms-*\n\/data\/app\/com.google.android.webview-*\n\/data\/app\/com.google.ar.core-*\n\nOn Android 11, \/data\/app\/ is whitelisted as package installation paths are randomized and cannot be guessed by apps.\n\nChangelog:\n\nv13 - 2021-09-30\nWhitelist \/product\/.\n\nv12 - 2021-08-19\nAndroid 11 support.\nSupport devices with \/system_ext.\nWhitelist \/proc\/meminfo.\n\nv11 - 2020-02-20\nAllow \/etc\/textclassifier\/ for AI models (Pie).","className":"libcore.io.BlockGuardOs","methodName":"open","parameterTypes":["java.lang.String","int","int"],"returnType":"java.io.FileDescriptor","minSdk":1,"maxSdk":999,"minApk":0,"maxApk":2147483647,"enabled":true,"optional":false,"usage":true,"notify":false,"luaScript":"-- Fif.BlockGuardOs.open is a Lua hook definition designed to work                     \n-- with XPrivacyLua.\n\n-- Fif.BlockGuardOs.open is free software: you can redistribute it and\/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation, either version 3 of the License, or\n-- (at your option) any later version.\n\n-- Fif.BlockGuardOs.open is distributed in the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\n-- You should have received a copy of the GNU General Public License\n-- along with XPrivacyLua.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\n-- Copyright 2017-2018 Marcel Bokhorst (M66B)\n-- Copyright (C) 2018-2021 Philippe Troin (Fif_ on XDA)\n\nfunction before(hook, param)\n    local context = param:getApplicationContext()\n    local WhitelistPrefixes = param:getValue('Fif.BlockGuardOs.open.WhitelistPrefixes', context)\n\n    if WhitelistPrefixes == nil then\n        local ai = context:getApplicationInfo()\n        local clsOsBuild = luajava.bindClass('android.os.Build')\n        local clsFile = luajava.bindClass('java.io.File')\n        local clsEnvironment = luajava.bindClass('android.os.Environment')\n        local packageName = context:getPackageName()\n\n        WhitelistPrefixes = {\n            '\/data\/data\/' .. packageName .. '\/',\n            ai.dataDir .. '\/',\n            '\/system',\n            '\/vendor\/',\n            '\/product\/',\n            '\/data\/misc\/',\n            '\/etc\/textclassifier\/',\n            '\/etc\/timezone',\n            '\/dev\/',\n            luajava.new(clsFile, \"\/proc\/self\"):getCanonicalPath() .. '\/',\n            '\/proc\/meminfo',\n            '\/proc\/self\/',\n            '\/proc\/vmstat',\n            '\/proc\/zoneinfo',\n        }\n\n        if (clsOsBuild.VERSION.SDK_INT >= 30) then\n            -- No need to list all allowed source dir prefixes in Android 11 (SDK 30), they're made hard to guess with random prefixes\n            table.insert(WhitelistPrefixes, '\/data\/app\/')\n        else\n            -- Android 10 and below use a list of allowable apps, mostly Google components\n            local pkgSourceDir = luajava.new(clsFile, ai.sourceDir):getParent()\n            local allSourceDir = luajava.new(clsFile, pkgSourceDir):getParent()\n            table.insert(WhitelistPrefixes, pkgSourceDir .. '\/')\n            table.insert(WhitelistPrefixes, allSourceDir .. '\/com.google.android.gms-')\n            table.insert(WhitelistPrefixes, allSourceDir .. '\/com.google.android.webview-')\n            table.insert(WhitelistPrefixes, allSourceDir .. '\/com.android.webview-')\n            table.insert(WhitelistPrefixes, allSourceDir .. '\/com.android.chrome-')\n            table.insert(WhitelistPrefixes, allSourceDir .. '\/com.google.ar.core-')\n        end\n\n        if ai.deviceProtectedDataDir ~= nil then\n            table.insert(WhitelistPrefixes, ai.deviceProtectedDataDir .. '\/')\n            table.insert(WhitelistPrefixes, luajava.new(clsFile,  ai.deviceProtectedDataDir):getParent() .. '\/com.google.android.gms\/')\n        end\n\n        local clsArray = luajava.bindClass('java.lang.reflect.Array')\n        local pathJarray = clsEnvironment:buildExternalStorageAppFilesDirs(packageName)\n        local i\n        for i = 0, pathJarray.length-1 do\n            table.insert(WhitelistPrefixes, clsArray:get(pathJarray, i):getParent() .. '\/')\n        end\n\n        pathJarray = clsEnvironment:buildExternalStorageAppMediaDirs(packageName)\n        for i = 0, pathJarray.length-1 do\n            table.insert(WhitelistPrefixes, clsArray:get(pathJarray, i):getAbsolutePath() .. '\/')\n        end\n\n        pathJarray = clsEnvironment:buildExternalStorageAppObbDirs(packageName)\n        for i = 0, pathJarray.length-1 do\n            table.insert(WhitelistPrefixes, clsArray:get(pathJarray, i):getAbsolutePath() .. '\/')\n        end\n\n        param:putValue('Fif.BlockGuardOs.open.WhitelistPrefixes', WhitelistPrefixes, context)\n        log('WhitelistPrefixes: ' .. table.concat(WhitelistPrefixes, ', '))\n    end\n\n    local found = false\n    local path = param:getArgument(0)\n    if path == nil then\n        found = true\n    else\n        local idx, prefix\n        for idx, prefix in pairs(WhitelistPrefixes) do\n            if string.sub(path, 1, string.len(prefix)) == prefix then\n                found = true\n                break\n            end\n        end\n    end\n\n    if found then\n        log('Allow ' .. path)\n        return false\n    else\n        log('Deny ' .. path)\n        local clsFileNotFound = luajava.bindClass('java.io.FileNotFoundException')\n        local fake = luajava.new(clsFileNotFound, path)\n        param:setResult(fake)\n        return true, path\n    end\nend\n"}
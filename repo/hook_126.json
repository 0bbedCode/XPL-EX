{"builtin":false,"collection":"Fif","group":"Use.Shell","name":"ProcessBuilder.start","author":"M66B, Fif_","version":1,"description":"The ProcessBuilder.start and Runtime.exec* hooks allow you to filter which commands Android apps are allowed to run.\nBy default, once installed, the hooks will not allow apps to run any commands\n(except for the Maps-related getprop command described below).  The hooks will prevent apps from running or detecting su unless the su command is whitelisted.\nYou can whitelist some commands by changing the \"Allowed commands (Java regex)\"  custom value.\nIt is recommended to use these hooks from the Fif collection without also using the original hooks with the exact same names from M66B which are in the Privacy collection.\nThe Fif hooks supersedes the M66B ones and the M66B hooks should be removed if you have downloaded them from the repo before.\n\nInstructions:\n1. Download these 7 hooks in the Fif collection:\n    - ProcessBuilder.start\n    - Runtime.exec\/array\n    - Runtime.exec\/array\/env\n    - Runtime.exec\/array\/env\/file\n    - Runtime.exec\/cmd\n    - Runtime.exec\/cmd\/env\n    - Runtime.exec\/cmd\/env\/file\n2. Make sure that the Fif collection is enabled in XPL Pro.\n3.a. In XPL, enable the (new) \"Use.Shell\" collection for apps for which you want to filter shell commands.\n3.b. Or, in XPL Pro, enable the seven hooks listed above.\n4. If needed, configure a regular expression matching commands to be allowed in XPL Pro, Custom values, \"Allowed commands (Java regex)\".\n   By default, and unless you configure a regular expression (either globally or on a per-app basis), all commands will be denied and logged to the XPL Pro log.\n   The regular expression will always automatically include commands of the form \"getprop debug.mapview...\" to not break Maps.\n   The regular expression language is described at https:\/\/developer.android.com\/reference\/java\/util\/regex\/Pattern.html\n   For example \"(\/system\/bin\/)getprop oem\\.somestring\\..*\" will allow all commands starting with \"\/system\/bin\/getprop oem.sometring.\" or with \"getprop oem.somestring.\".\n   To whitelist the su command for root apps, you can use the following regular expression: \"su(\\s.*)?\".\n\nChangelog:\n\nv1a - 2020-02-18\nDocumentation fixes (no code changes).\n\nv1 - 2020-02-17\nFirst public release.\n","className":"java.lang.ProcessBuilder","methodName":"start","parameterTypes":[],"returnType":"java.lang.Process","minSdk":1,"maxSdk":999,"minApk":0,"maxApk":2147483647,"enabled":true,"optional":false,"usage":true,"notify":false,"luaScript":"-- Fif.Runtime.exec* and Fif.ProcessBuilder.start are a set of Lua \n-- hook definition designed to work with XPrivacyLua.\n\n-- Fif.Runtime.exec* and Fif.ProcessBuilder.start are free software: \n-- you can redistribute it and\/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation, either version 3 of the License, or\n-- (at your option) any later version.\n\n-- Fif.Runtime.exec* and Fif.ProcessBuilder.start are distributed in \n-- the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\n-- Copyright 2017-2018 Marcel Bokhorst (M66B)\n-- Copyright 2020 Philippe Troin (Fif_ on XDA)\n\nfunction before(hook, param)\n    local name = hook:getName()\n    local command\n    local commandline = ''\n    local commandlog = nil\n\n    if name == 'ProcessBuilder.start' then\n        local this = param:getThis()\n        local commandList = this:command()\n        command = commandList:toArray()\n    else\n        command = param:getArgument(0)\n    end\n\n    if command == nil then\n        commandlog = 'null'\n    elseif type(command) == 'string' then\n        commandline = command\n    else\n        local index\n        local length = command['length']\n        for index = 1, length do\n            if index ~= 1 then\n                commandline = commandline .. ' '\n            end\n            commandline = commandline .. command[index]\n        end\n    end\n    if commandlog == nil then\n        commandlog = commandline\n    end\n\n    local scope = param:getApplicationContext()\n    local regexObj = param:getValue('Fif.Runtime.exec.allowedCommandsRegex', scope)\n    if regexObj == nil then\n        local regexString = param:getSetting(\"Allowed commands (Java regex)\")\n        if regexString == nil then\n            regexString = ''\n        end\n        local clsPattern = luajava.bindClass('java.util.regex.Pattern')\n        local pattern = '^(?:(?:\/system\/bin\/)?getprop debug\\\\.mapview\\\\..*|(?:' .. regexString .. '))$'\n        log('Compiling pattern: ' .. pattern)\n        regexObj = clsPattern:compile(pattern)\n        param:putValue('Fif.Runtime.exec.allowedCommandsRegex', regexObj, scope)\n    end\n\n    local matcher = regexObj:matcher(commandline)\n    if matcher:matches() then\n        log('Allow ' .. commandlog)\n        return false\n    else\n        log('Deny ' .. commandlog)\n        local clsIoException = luajava.bindClass('java.io.IOException')\n        local fake = luajava.new(clsIoException, 'Privacy')\n        param:setResult(fake)\n        return true, commandlog\n    end\nend\n","settings":["Allowed commands (Java regex)"]}
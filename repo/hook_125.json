{"builtin":false,"collection":"Fif","group":"Use.Shell","name":"Runtime.exec\/array","author":"M66B, Fif_","version":1,"description":"Please refer to the ProcessBuilder.start hook documentation.\n","className":"java.lang.Runtime","methodName":"exec","parameterTypes":["[Ljava.lang.String;"],"returnType":"java.lang.Process","minSdk":1,"maxSdk":999,"minApk":0,"maxApk":2147483647,"enabled":true,"optional":false,"usage":true,"notify":false,"luaScript":"-- Fif.Runtime.exec* and Fif.ProcessBuilder.start are a set of Lua \n-- hook definition designed to work with XPrivacyLua.\n\n-- Fif.Runtime.exec* and Fif.ProcessBuilder.start are free software: \n-- you can redistribute it and\/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation, either version 3 of the License, or\n-- (at your option) any later version.\n\n-- Fif.Runtime.exec* and Fif.ProcessBuilder.start are distributed in \n-- the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\n-- Copyright 2017-2018 Marcel Bokhorst (M66B)\n-- Copyright 2020 Philippe Troin (Fif_ on XDA)\n\nfunction before(hook, param)\n    local name = hook:getName()\n    local command\n    local commandline = ''\n    local commandlog = nil\n\n    if name == 'ProcessBuilder.start' then\n        local this = param:getThis()\n        local commandList = this:command()\n        command = commandList:toArray()\n    else\n        command = param:getArgument(0)\n    end\n\n    if command == nil then\n        commandlog = 'null'\n    elseif type(command) == 'string' then\n        commandline = command\n    else\n        local index\n        local length = command['length']\n        for index = 1, length do\n            if index ~= 1 then\n                commandline = commandline .. ' '\n            end\n            commandline = commandline .. command[index]\n        end\n    end\n    if commandlog == nil then\n        commandlog = commandline\n    end\n\n    local scope = param:getApplicationContext()\n    local regexObj = param:getValue('Fif.Runtime.exec.allowedCommandsRegex', scope)\n    if regexObj == nil then\n        local regexString = param:getSetting(\"Allowed commands (Java regex)\")\n        if regexString == nil then\n            regexString = ''\n        end\n        local clsPattern = luajava.bindClass('java.util.regex.Pattern')\n        local pattern = '^(?:(?:\/system\/bin\/)?getprop debug\\\\.mapview\\\\..*|(?:' .. regexString .. '))$'\n        log('Compiling pattern: ' .. pattern)\n        regexObj = clsPattern:compile(pattern)\n        param:putValue('Fif.Runtime.exec.allowedCommandsRegex', regexObj, scope)\n    end\n\n    local matcher = regexObj:matcher(commandline)\n    if matcher:matches() then\n        log('Allow ' .. commandlog)\n        return false\n    else\n        log('Deny ' .. commandlog)\n        local clsIoException = luajava.bindClass('java.io.IOException')\n        local fake = luajava.new(clsIoException, 'Privacy')\n        param:setResult(fake)\n        return true, commandlog\n    end\nend\n","settings":["Allowed commands (Java regex)"]}
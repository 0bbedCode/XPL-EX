{"builtin":false,"collection":"Fif","group":"Read battery","name":"Intent.createFromParcel\/battery","author":"Fif","version":1,"description":"These hooks hide your current battery level and status by:\n- Reporting that the battery is not plugged, discharging, at 95%, 4200mV, 150Wh, 25\u00b0C, in good health, and with a charge count of 0.\n- Converting all POWER_CONNECTED events into POWER_DISCONNECTED.\n- Converting all BATTERY_LOW events into BATTERY_OK.\nObviously, don't use on battery monitoring apps, but there's no reason to share battery levels with anyone else.\n\nInstructions:\n1. Download these hooks:\n    - BatteryManager.getIntProperty\n    - BatteryManager.getLongProperty\n    - BatteryManager.isCharging\n    - Intent.createFromParcel\/battery\n2. Make sure that the Fif collection is enabled in XPL Pro.\n3.a. In XPL, enable the (new) \"Use battery\" collection for apps for which you want to fake the battery status.\n3.b. Or, in XPL Pro, enable the four hooks listed above.\n\nChangelog:\n\nv1 - 2018-10-09\nFirst public release.\n","className":"android.content.Intent","methodName":"CREATOR:createFromParcel","parameterTypes":["android.os.Parcel"],"returnType":"android.content.Intent","minSdk":1,"maxSdk":999,"minApk":0,"maxApk":2147483647,"enabled":true,"optional":false,"usage":true,"notify":false,"luaScript":"-- BatteryManager.* is a set of Lua hook definition designed to work                     \n-- with XPrivacyLua.\n\n-- BatteryManager.* is free software: you can redistribute it and\/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation, either version 3 of the License, or\n-- (at your option) any later version.\n\n-- BatteryManager.* is distributed in the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\nfunction after(hook, param)\n  local intent = param:getResult()\n  if intent == nil then\n    return false\n  end\n\n  local action = intent:getAction()\n  if action == nil then\n    return false\n  end\n\n  if action == 'android.intent.action.BATTERY_CHANGED' then\n\n    local old_intent = tostring(intent)\n    local clsBatteryMgr = luajava.bindClass('android.os.BatteryManager')\n    local bundle = intent:getExtras()\n\n    local scale =  bundle:getInt(clsBatteryMgr.EXTRA_SCALE, -1)\n    if bundle:getInt(clsBatteryMgr.EXTRA_LEVEL, -1) ~= scale and scale >= 0 then\n      bundle:putInt(clsBatteryMgr.EXTRA_LEVEL, math.floor(.95*scale))\n    end\n    bundle:remove(clsBatteryMgr.EXTRA_BATTERY_LOW)\n    bundle:putInt(clsBatteryMgr.EXTRA_VOLTAGE, 4200)\n    bundle:putInt(clsBatteryMgr.EXTRA_TEMPERATURE, 250)\n    bundle:putInt(clsBatteryMgr.EXTRA_CHARGE_COUNTER, 0)\n    bundle:putInt(clsBatteryMgr.EXTRA_STATUS, clsBatteryMgr.STATUS_GOOD)\n    bundle:putInt(clsBatteryMgr.EXTRA_PLUGGED, 0)\n\n    intent:replaceExtras(bundle)\n\n    log('Deny ' .. old_intent .. ' -> ' .. tostring(intent))\n    return true, old_intent, tostring(intent)\n\n  elseif action == 'android.intent.action.ACTION_POWER_CONNECTED' then\n\n    local old_intent = tostring(intent)\n    intent:setAction('android.intent.action.ACTION_POWER_DISCONNECTED')\n    log('Deny ' .. old_intent .. ' -> ' .. tostring(intent))\n    return true, old_intent, tostring(intent)\n\n  elseif action == 'android.intent.action.BATTERY_LOW' then\n\n    local old_intent = tostring(intent)\n    intent:setAction('android.intent.action.BATTERY_OKAY')\n    log('Deny ' .. old_intent .. ' -> ' .. tostring(intent))\n    return true, old_intent, tostring(intent)\n\n  else\n    return false\n  end\nend\n"}
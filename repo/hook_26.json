{"builtin":false,"collection":"Fif","group":"Public.Storage","name":"File.mkdirs","author":"Fif_","version":2,"description":"Blocks creating directories outside of a whitelist of acceptable directories.  This should prevent apps from creating directories outside of app-specific locations.","className":"java.io.File","methodName":"mkdirs","parameterTypes":[],"returnType":"boolean","minSdk":1,"maxSdk":999,"minApk":0,"maxApk":2147483647,"enabled":true,"optional":false,"usage":true,"notify":false,"luaScript":"-- Fif.File.mkdir is a Lua hook designed to work with XPrivacyLua.\n-- Copyright (C) 2018 Philippe Troin (Fif_ on XDA)\n\n-- Fif.File.mkdir is free software: you can redistribute it and\/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation, either version 3 of the License, or\n-- (at your option) any later version.\n\n-- Fif.File.mkdir is distributed in the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\n-- You should have received a copy of the GNU General Public License\n-- along with XPrivacyLua.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\nfunction before(hook, param)\n    local clsFile = luajava.bindClass('java.io.File')\n    local found = false\n    local obj = param:getThis()\n    local path = obj.path\n    if path == nil then\n        found = true\n    end\n\n    if not found then\n        if luajava.new(clsFile, path):exists() then\n            found = true\n        end\n    end\n\n    if not found then\n        local context = param:getApplicationContext()\n        local ai = context:getApplicationInfo()\n        local clsEnvironment = luajava.bindClass('android.os.Environment')\n        local packageName = context:getPackageName()\n        local prefixes = {\n            '\/data\/data\/' .. packageName,\n            ai.dataDir,\n            luajava.new(clsFile, ai.sourceDir):getParent(),       \n        }\n\n        if ai.deviceProtectedDataDir ~= nil then\n            table.insert(prefixes, ai.deviceProtectedDataDir)\n        end\n\n        local clsArray = luajava.bindClass('java.lang.reflect.Array')\n        local pathJarray = clsEnvironment:buildExternalStorageAppFilesDirs(packageName)\n        local i\n        for i = 0, pathJarray.length-1 do\n            table.insert(prefixes, clsArray:get(pathJarray, i):getParent())\n        end\n\n        pathJarray = clsEnvironment:buildExternalStorageAppMediaDirs(packageName)\n        for i = 0, pathJarray.length-1 do\n            table.insert(prefixes, clsArray:get(pathJarray, i):getAbsolutePath())\n        end\n\n        pathJarray = clsEnvironment:buildExternalStorageAppObbDirs(packageName)\n        for i = 0, pathJarray.length-1 do\n            table.insert(prefixes, clsArray:get(pathJarray, i):getAbsolutePath())\n        end\n\n        local prefix\n        for i, prefix in pairs(prefixes) do\n            if path == prefix or string.sub(path, 1, string.len(prefix)+1) == prefix .. '\/' then\n                found = true\n                break\n            end\n        end\n    end\n\n    local prefixDescr = ''\n    if prefixes ~= nil then\n       prefixDescr = ' in whitelist: ' .. table.concat(prefixes, ', ')\n    end\n\n    if found then\n        log('Allow ' .. path .. prefixDescr)\n        return false\n    else\n        log('Deny ' .. path .. prefixDescr)\n        param:setResult(false)\n        return true, path\n    end\nend\n"}
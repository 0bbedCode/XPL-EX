{"builtin":false,"collection":"Intika-Play-Updater-MoDs","group":"Block apps updates","name":"PackageManager.getApplicationEnabledSetting","author":"Intika","version":3,"description":"Name:\nBlock apps updates (Block Google Firebase Cloud Messaging)\n\nHook Part: \n01\/01\n\nDescription: \nThis hook hide partially selected apps from Google Play Store.\nIts purpose is to block updates for a predefined list of packages names. This hook is only available for the Google Play Store. Enable the collection \"Intika-Play-Updater-MoDs\" and select \"Block apps updates\" for the app Google Play Store.\nAdd the package(s) name(s) of the app(s) you want to hide\/block to the setting field \"PlayStore blocked update packages list\", packages name need to be separated by a space, or you can enter one package name per line. (partial package name can be used as well).\n\nContact\/Support\/Donation:\nTelegram: @intikaa\n\nNote:\n1. Don't try to install\/update a hidden app from the store before un-hiding it effectively. This may lead to unexpected result.\n2. This hook also disable the automated libraries updates for hidden apps.\n3. This hook is as light as possible, future versions may include additional hooks.\n4. This may need to be updated for future PlayStore versions.\n5. This can be used alongside with hooks with the same name.\n6. This is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY, nor responsibility for its usage.\n\nBased on:\nHooks from: M66B and Fif_\n\nLinks:\nhttps:\/\/github.com\/intika\n\nDocumentation:\n\nChangelog:\nv3. Add support for inApp purchase for hidden apps\nv2: Add setting\nv1: Initial release","className":"android.content.pm.PackageManager","methodName":"getApplicationEnabledSetting","parameterTypes":["java.lang.String"],"returnType":"int","minSdk":1,"maxSdk":999,"minApk":0,"maxApk":2147483647,"excludePackages":"^(?!com.android.vending$).*","enabled":true,"optional":false,"usage":true,"notify":false,"luaScript":"-- Copyright (C) 2022 Intika\n-- Copyright (C) 2018 Philippe Troin (Fif_ on XDA)\n\n-- This is free software: you can redistribute it and\/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation, either version 3 of the License, or\n-- (at your option) any later version.\n\n-- This is distributed in the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\n-- You should have received a copy of the GNU General Public License\n-- along with XPrivacyLua.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\nfunction after(hook, param)\n    local result = param:getResult()\n    if result == nil then\n        return false\n    end\n\n    local scope = param:getApplicationContext()\n    local applicationInfo, packageName\n    local hookName = hook:getName()\n    local hookNameGetPackageInfo = 'PackageManager.getPackageInfo'\n    local hookNameGetPackage = 'PackageManager.getPackage'\n    local hookNameGetApplication = 'PackageManager.getApplication'\n\n    if hookName:sub(1, hookNameGetPackage:len()) == hookNameGetPackage then\n        local packageInfo\n        if hookName:sub(1, hookNameGetPackageInfo:len()) == hookNameGetPackageInfo then\n            if (hookName == 'PackageManager.getPackageInfo\/packageName' \n                    or hookName == 'PackageManager.getPackageInfoAsUser' )\n                    and param:getValue('Intika.BUpdates.PackageManager.getPackage.selfCall.package.' .. param:getArgument(0), scope) == '1' then\n                return false\n            end\n            packageInfo = result\n        else\n            local pm = param:getThis()\n            -- Ugh, our hooked version of \n            -- getPackageInfo can throw \n            -- and exception which will show up \n            -- as an error even though the hooks \n            -- together performed as expected.\n            -- Signal to the other hook this \n            -- is us calling ourselves.\n            param:putValue('Intika.BUpdates.PackageManager.getPackage.selfCall.package.' .. param:getArgument(0), '1', scope)\n            packageInfo = pm:getPackageInfo(param:getArgument(0), 0)\n            param:putValue('Intika.BUpdates.PackageManager.getPackage.selfCall.package.' .. param:getArgument(0), nil, scope)\n        end\n        applicationInfo = packageInfo.applicationInfo\n        packageName = packageInfo.packageName\n    elseif hookName:sub(1, hookNameGetApplication:len()) == hookNameGetApplication then\n        if hookName == 'PackageManager.getApplicationInfo' or hookName == 'PackageManager.getApplicationInfoAsUser' then\n            if param:getValue('Intika.BUpdates.PackageManager.getPackage.selfCall.application.' .. param:getArgument(0), scope) == '1' then\n                return false\n            end\n            applicationInfo = result\n        else\n            local pm = param:getThis()\n            -- Ugh, our hooked version of \n            -- getPackageInfo can throw \n            -- and exception which will show up \n            -- as an error even though the hooks \n            -- together performed as expected.\n            -- Signal to the other hook this \n            -- is us calling ourselves.\n            param:putValue('Intika.BUpdates.PackageManager.getPackage.selfCall.application.' .. param:getArgument(0), '1', scope)\n            applicationInfo = pm:getApplicationInfo(param:getArgument(0), 0)\n            param:putValue('Intika.BUpdates.PackageManager.getPackage.selfCall.application.' .. param:getArgument(0), nil, scope)\n        end\n        packageName = param:getArgument(0)\n    else\n        local crash = \"Unexpected hookName=\" .. hookName\n        crash.crash()\n    end\n\n    if packageName:find('com.android.vending.billing.InAppBillingService', 1, true) then\n        return false;\n    end\n\n    local list = param:getSetting(\"PlayStore blocked update packages list\")\n\n    if list == nil then\n        return false\n    end\n\n    local match = false\n    for item in string.gmatch(list, \"[^%s]+\") do\n        if packageName:find(item, 1, true) then\n            match = true\n        end\n    end\n\n    if match == false then\n        -- not our target\n        return false\n    else\n        log('XPrivacy blocked a play update')\n    end\n\n    local cuid = param:getUid()\n    -- if hookName:sub(-6) == 'AsUser' then\n    --     cuid = param:getArgument(2)\n    -- end\n\n    if cuid == applicationInfo.uid then\n        -- allow same uid\n        return false\n    end\n\n    local clsException\n    if hookName == 'PackageManager.getApplicationEnabledSetting' then\n        clsException = luajava.bindClass('java.lang.IllegalArgumentException')\n    else\n        clsException = luajava.bindClass('android.content.pm.PackageManager$NameNotFoundException')\n    end\n\n    local fake = luajava.new(clsException, packageName)\n    param:setResult(fake)\n    log('Deny ' .. packageName)\n\n    return true, packageName, tostring(fake)\nend\n\n\n","settings":["PlayStore blocked update packages list"]}
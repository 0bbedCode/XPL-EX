{"builtin":false,"collection":"Fif","group":"Get app updates","name":"AppUpdateManagerFactory.create","author":"Fif_ on XDA","version":2,"description":"This hook has nothing to do with privacy: it prevents apps from detecting that a new update is available on the Play Store.  That should take care of the nagging about \"upgrading\".   It only is effective on apps that use the Play Services' AppUpdateManager.\nWarning: you may miss important updates when using this hook.\n\n\u2605\u2605\u2605 XPrivacyLua 1.26 or later is required starting with version 2 of the hook. \u2605\u2605\u2605\n\nInstructions:\n1. Download this hook.\n2. Make sure that the Fif collection is enabled in XPL Pro.\n3.a. In XPL, enable the (new) \"Get app updates\" group for apps you want to prevent from getting update information.\n3.b. Or, in XPL Pro, enable the AppUpdateManagerFactory.create hook.\n\nChangelog:\n\nv2 - 2019-11-15\nFix hangs on some apps.\nRequires XPrivacyLua 1.26 or later.\n\nv1 - 2019-11-10\nFirst public release.","className":"com.google.android.play.core.appupdate.AppUpdateManagerFactory","methodName":"create","parameterTypes":["android.content.Context"],"returnType":"com.google.android.play.core.appupdate.AppUpdateManager","minSdk":0,"maxSdk":999,"minApk":0,"maxApk":2147483647,"enabled":true,"optional":true,"usage":true,"notify":false,"luaScript":"-- AppUpdateManagerFactory.create is a Lua hook definition designed to work                     \n-- with XPrivacyLua.\n\n-- AppUpdateManagerFactory.create is free software: you can redistribute it and\/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation, either version 3 of the License, or\n-- (at your option) any later version.\n\n-- AppUpdateManagerFactory.create is distributed in the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\nfunction after(h, param)\n  local hooked = param:getValue('hooked-getAppUpdateInfo', this)\n  if hooked then\n    return false\n  else\n    param:putValue('hooked-getAppUpdateInfo', true, this)\n    local appUpdateManager = param:getResult()\n    hook(appUpdateManager, 'getAppUpdateInfo', getAppUpdateInfoHook)\n    log('Hooked getAppUpdateInfo()')\n    return true, 'Hooked getAppUpdateInfo()'\n  end\nend\n\nfunction getAppUpdateInfoHook(when, param)\n  if when == \"after\" then\n    local hooked = param:getValue('hooked-Task-getResult', this)\n    if hooked then\n      return false\n    else\n      param:putValue('hooked-Task-getResult', true, this)\n      local task = param:getResult()\n      hook(task, 'getResult', getResultHook)\n      log('Hooked Task::getResult()')\n    end\n  end\nend\n\nfunction getResultHook(when, param)\n  if when == \"after\" then\n    local hooked = param:getValue('hooked-AppUpdateInfo', this)\n    if hooked then\n      return false\n    else\n      param:putValue('hooked-AppUpdateInfo', true, this)\n      local updateInfo = param:getResult()\n      hook(updateInfo, 'availableVersionCode', appUpdateInfoHook, 'availableVersionCode', 0)\n      hook(updateInfo, 'isUpdateTypeAllowed', appUpdateInfoHook, 'isUpdateTypeAllowed', false)\n      hook(updateInfo, 'updateAvailability', appUpdateInfoHook, 'updateAvailability', 1)\n      log('Hooked AppUpdateInfo')\n    end\n  end\nend\n\nfunction appUpdateInfoHook(when, param, name, fake)\n  if when == \"after\" then\n    local val = param:getResult()\n    param:setResult(fake)\n    log(name .. '() \u2192 ' .. tostring(fake) .. ' (was ' .. tostring(val) .. ')')\n  end\nend\n"}
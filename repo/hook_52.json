{"builtin":false,"collection":"Fif","group":"Use.Tracking","name":"SystemProperties.get\/custom","author":"Fif_","version":5,"description":"This hook complements the built-in XPrivacyLua hooks of the same name.\n\nInstructions:\n1. Download these two hooks:\n    - SystemProperties.get\/custom\n    - SystemProperties.get.default\/custom\n2. Make sure that the Fif collection is enabled in XPL Pro.\n3. Configure a property blacklist with XPrivacyLua Pro, under \"Custom Values\", \"Property blacklist (prefixes)\".\n   List items are whitespace separated, and will match if they are a prefix of the requested property.\n   For example, if the blacklist is \"persist. net\", all of persist.usb, persist.key, net.DNS and netif will be blocked.\n4. For any app for which you want the hooks to apply:\n4.a. Toggle the \"Use tracking\" category until it's fully enabled (red) in XPL.\n4.b. Or, alternately, enable both SystemProperties.get\/custom SystemProperties.get.default\/custom hook in XPL Pro.\n\nNote that the builtin hooks SystemProperties.get\/build, \/operator, \/serial, and \/vendor, and their get.default counterparts (8 hooks total) can either complement the \/custom hooks, or the \/custom hooks can completely replace them.\nIt is recommended to use the builtin SystemProperties.get\/operator (and get.default\/operator) for masking the operator as the built-in hooks return valid (but fake) operator ids and countries, while the \/custom hooks would return completely invalid values.\nThe builtin \/build, \/serial and \/vendor .get and .get.default hooks can safely be replaced with this version, provided that you respectively configure the \"Property blacklist (prefixes)\" custom values with:\n  - \"ro.build.\" for replacing the builtin \/build hooks.\n  - \"ro.serialno ro.boot.serialno\" for replacing the builtin \/serial hooks.\n  - \"ro.vendor.\" for replacing the builtin \/vendor hooks.\n\nThe \/custom hooks will generate fake values using this heuristic:\n - If the original value looks like a number or hexadecimal number, the fake value will be a number of same magnitude (number of digits) but with all zeroes.  Eg. 9138474 will become 0000000 and 8d8fe will become 00000.\n - Otherwise the string \"Private\" will be returned.\n\nChangelog:\n\nv5 - 2018-09-30\nActually set the fake value in the hook instead of nil.\n\nv4 - 2018-09-30\nExpanded description field \/ documentation.\nNow the faked value is not nil (crashes Coc), but either a zeroed out number or the string \"Private\".\n","className":"android.os.SystemProperties","methodName":"get","parameterTypes":["java.lang.String"],"returnType":"java.lang.String","minSdk":1,"maxSdk":999,"minApk":0,"maxApk":2147483647,"enabled":true,"optional":false,"usage":true,"notify":false,"luaScript":"-- Fif.SystemProperties.get_custom is a Lua hook designed to work with XPrivacyLua.\n-- Copyright (C) 2018 Philippe Troin (Fif_ on XDA)\n\n-- Fif.SystemProperties.get_custom is free software: you can redistribute it and\/or modify\n-- it under the terms of the GNU General Public License as published by\n-- the Free Software Foundation, either version 3 of the License, or\n-- (at your option) any later version.\n\n-- Fif.SystemProperties.get_custom is distributed in the hope that it will be useful,\n-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-- GNU General Public License for more details.\n\n-- You should have received a copy of the GNU General Public License\n-- along with XPrivacyLua.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\nfunction after(hook, param)\n    local result = param:getResult()\n    if result == nil then\n        return false\n    end\n\n    local context = param:getApplicationContext()\n    local BlacklistPropertyPrefixes = param:getValue('Fif.SystemProperties.get_custom.BlacklistPropertyPrefixes', context)\n\n    if BlacklistPropertyPrefixes == nil then\n        local blacklist = param:getSetting(\"Property blacklist (prefixes)\")\n        BlacklistPropertyPrefixes = {}\n        if blacklist ~= nil then\n            blacklist:gsub('[%S]+', function(x) table.insert(BlacklistPropertyPrefixes, x) end)\n        end\n        param:putValue('Fif.SystemProperties.get_custom.BlacklistPropertyPrefixes', BlacklistPropertyPrefixes, context)\n        log('Property prefix blacklist: ' .. table.concat(BlacklistPropertyPrefixes, ', '))\n    end\n\n    local key = param:getArgument(0)\n    local found = false\n    local i, prefix\n    for i, prefix in pairs(BlacklistPropertyPrefixes) do\n        if string.sub(key, 1, string.len(prefix)) == prefix then\n            found = true\n            break\n        end\n    end\n\n    if found then\n        local fake\n        if result:match('^[0-9a-fA-F]+$') then\n            fake = string.rep('0', result:len())\n        else\n            fake = 'Private'\n        end\n        log('Deny ' .. key .. '=' .. result .. ' \u2192 ' .. fake)\n        param:setResult(fake)\n        return true, key .. '=' .. result, key .. '=' .. fake\n    else\n        log('Allow ' .. key .. '=' .. result)\n        return false\n    end\nend\n","settings":["Property blacklist (prefixes)"]}